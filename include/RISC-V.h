#pragma once

#include "ISA.h"

#define INSTRUCTION_OPCODE		0x7F
#define INSTRUCTION_RD			0xF80
#define INSTRUCTION_RD_SHIFT		7
#define INSTRUCTION_FUNCT3		0x7000
#define INSTRUCTION_FUNCT3_SHIFT	12
#define INSTRUCTION_RS1			0xF8000
#define INSTRUCTION_RS1_SHIFT		15
#define INSTRUCTION_RS2			0x1F00000
#define INSTRUCTION_RS2_SHIFT		20
#define INSTRUCTION_FUNCT7		0x1F00000
#define INSTRUCTION_FUNCT7_SHIFT	25

static const ISA_filter SRLISRAI[] = {
	{ INSTRUCTION_FUNCT7, INSTRUCTION_FUNCT7_SHIFT, 0b0000000, NULL, NULL }, // SRLI
	{ INSTRUCTION_FUNCT7, INSTRUCTION_FUNCT7_SHIFT, 0b0100000, NULL, NULL }, // SRLAI
};

static const ISA_filter OP_IMM[] = {
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b000, NULL, NULL }, // ADDI (0,0,0: NOP)
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b010, NULL, NULL }, // SLTI
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b011, NULL, NULL }, // SLTIU
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b111, NULL, NULL }, // ANDI
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b110, NULL, NULL }, // ORI
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b100, NULL, NULL }, // XORI
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b001, NULL, NULL }, // SLLI
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b101, NULL, SRLISRAI }, // SRLI/SRAI
};

static const ISA_filter SRLSRA[] = {
	{ INSTRUCTION_FUNCT7, INSTRUCTION_FUNCT7_SHIFT, 0b0000000, NULL, NULL }, // SRL
	{ INSTRUCTION_FUNCT7, INSTRUCTION_FUNCT7_SHIFT, 0b0100000, NULL, NULL }, // SRLA
};

static const ISA_filter ADDSUB[] = {
	{ INSTRUCTION_FUNCT7, INSTRUCTION_FUNCT7_SHIFT, 0b0000000, NULL, NULL }, // ADD
	{ INSTRUCTION_FUNCT7, INSTRUCTION_FUNCT7_SHIFT, 0b0100000, NULL, NULL }, // SUB
};

static const ISA_filter OP[] = {
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b000, NULL, ADDSUB }, // ADD/SUB
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b010, NULL, NULL }, // SLT
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b011, NULL, NULL }, // SLTU
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b111, NULL, NULL }, // AND
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b110, NULL, NULL }, // OR
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b100, NULL, NULL }, // XOR
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b001, NULL, NULL }, // SLL
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b101, NULL, SRLSRA }, // SRL/SRA
};

static const ISA_filter BRANCH[] = {
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b000, NULL, NULL }, // BEQ
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b111, NULL, NULL }, // BGEU
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b110, NULL, NULL }, // BLTU
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b100, NULL, NULL }, // BLT
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b001, NULL, NULL }, // BNE
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b101, NULL, NULL }, // BGE
};

static const ISA_filter LOAD[] = {
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b000, NULL, NULL }, // LB
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b001, NULL, NULL }, // LH
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b010, NULL, NULL }, // LW
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b100, NULL, NULL }, // LBU
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b101, NULL, NULL }, // LHU
};

static const ISA_filter STORE[] = {
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b000, NULL, NULL }, // SB
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b001, NULL, NULL }, // SH
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b010, NULL, NULL }, // SW
};

static const ISA_filter MISC_MEM[] = {
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b000, NULL, NULL }, // FENCE
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b001, NULL, NULL }, // FENCE.I
};

static const ISA_filter PRIV[] = {
	{ 0xFFF00000, 24, 0x000, NULL, NULL }, // ECALL
	{ 0xFFF00000, 24, 0x001, NULL, NULL }, // EBREAK
};

static const ISA_filter SYSTEM[] = {
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b000, NULL, PRIV }, // PRIV (ECALL/EBREAK)
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b001, NULL, NULL }, // CSRRW
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b010, NULL, NULL }, // CSRRS
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b011, NULL, NULL }, // CSRRC
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b101, NULL, NULL }, // CSRRWI
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b110, NULL, NULL }, // CSRRSI
	{ INSTRUCTION_FUNCT3, INSTRUCTION_FUNCT3_SHIFT, 0b111, NULL, NULL }, // CSRRCI
};

static const ISA_filter ISA[] = {
	{ INSTRUCTION_OPCODE, 0, 0b0010011, NULL, OP_IMM}, //OP-IMM
	{ INSTRUCTION_OPCODE, 0, 0b0110111, NULL, NULL}, // LUI
	{ INSTRUCTION_OPCODE, 0, 0b0010111, NULL, NULL }, // AUIPC
	{ INSTRUCTION_OPCODE, 0, 0b0110011, NULL, OP }, // OP
	{ INSTRUCTION_OPCODE, 0, 0b1101111, NULL, NULL }, // JAL
	{ INSTRUCTION_OPCODE, 0, 0b1100111, NULL, NULL }, // JALR
	{ INSTRUCTION_OPCODE, 0, 0b1100011, NULL, BRANCH }, // BRANCH
	{ INSTRUCTION_OPCODE, 0, 0b0000011, NULL, LOAD }, // LOAD
	{ INSTRUCTION_OPCODE, 0, 0b0100011, NULL, STORE }, // STORE
	{ INSTRUCTION_OPCODE, 0, 0b0001111, NULL, MISC_MEM }, // MISC_MEM
	{ INSTRUCTION_OPCODE, 0, 0b1110011, NULL, SYSTEM }, // SYSTEM
};